- name: Exécuter la sauvegarde des VMs sur Proxmox Backup Server
  when: run_backup
  block:
    - name: Vérifier si la configuration PBS est activée
      fail:
        msg: "La configuration PBS n'est pas activée"
      when: not configurer_pbs

    - name: Lister toutes les VMs
      shell: qm list | awk '{if(NR>1)print $1}'
      register: all_vms
      when: configurer_pbs

    - name: Identifier les templates VM
      shell: "qm config '{{ item }}' | grep -q 'template: 1'"
      register: vm_is_template
      failed_when: false
      changed_when: false
      loop: "{{ all_vms.stdout_lines }}"
      when: configurer_pbs

    - name: Vérifier si la VM est en cours d'exécution
      shell: "qm status '{{ item }}' | grep 'status: running'"
      register: vm_running
      ignore_errors: yes
      changed_when: false
      failed_when: false
      loop: "{{ all_vms.stdout_lines }}"
      when: configurer_pbs

    - name: Identifier les VMs allumées et non templates
      set_fact:
        vms_to_shutdown: "{{ vm_running.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"
      when: configurer_pbs

    - name: Éteindre les VMs nécessaires
      shell: "qm stop '{{ item }}'"
      when: item in vms_to_shutdown and item not in vm_is_template.results | map(attribute='item')
      loop: "{{ all_vms.stdout_lines }}"
      register: vms_stopped

    - name: Attendre que la VM soit éteinte
      shell: "qm status '{{ item }}' | grep 'status: stopped' || true"
      register: vm_stopped
      retries: 30
      delay: 10
      until: vm_stopped.rc == 0
      when: item in vms_stopped.results | map(attribute='item')
      loop: "{{ all_vms.stdout_lines }}"

    - name: Effectuer la sauvegarde de la VM
      shell: vzdump "{{ item }}" --storage "{{ pbs_storage_id }}" --remove 1 --mode snapshot
      when: configurer_pbs
      loop: "{{ all_vms.stdout_lines }}"

    - name: Redémarrer les VMs non-templates
      shell: qm start "{{ item }}"
      async: 600
      poll: 0
      when: item not in vm_is_template.results | map(attribute='item')
      loop: "{{ all_vms.stdout_lines }}"